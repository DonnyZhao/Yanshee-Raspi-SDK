# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RobotApi')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RobotApi')
    _RobotApi = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RobotApi', [dirname(__file__)])
        except ImportError:
            import _RobotApi
            return _RobotApi
        if fp is not None:
            try:
                _mod = imp.load_module('_RobotApi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _RobotApi = swig_import_helper()
    del swig_import_helper
else:
    import _RobotApi
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

UBTEDU_SDK_SW_VER = _RobotApi.UBTEDU_SDK_SW_VER
UBTEDU_ROBOT_NAME_LEN = _RobotApi.UBTEDU_ROBOT_NAME_LEN
UBTEDU_ROBOT_IP_ADDR_LEN = _RobotApi.UBTEDU_ROBOT_IP_ADDR_LEN
UBTEDU_ROBOT_STATUS_TYPE_PLAYACTION = _RobotApi.UBTEDU_ROBOT_STATUS_TYPE_PLAYACTION
UBTEDU_ROBOT_STATUS_TYPE_VOLUME = _RobotApi.UBTEDU_ROBOT_STATUS_TYPE_VOLUME
UBTEDU_ROBOT_STATUS_TYPE_POWER_VOLTAGE = _RobotApi.UBTEDU_ROBOT_STATUS_TYPE_POWER_VOLTAGE
UBTEDU_ROBOT_STATUS_TYPE_POWER_RECHARGE = _RobotApi.UBTEDU_ROBOT_STATUS_TYPE_POWER_RECHARGE
UBTEDU_ROBOT_STATUS_TYPE_POWER_PERCENT = _RobotApi.UBTEDU_ROBOT_STATUS_TYPE_POWER_PERCENT
UBTEDU_ROBOT_STATUS_TYPE_POWER_LOWALERT = _RobotApi.UBTEDU_ROBOT_STATUS_TYPE_POWER_LOWALERT
UBTEDU_ROBOT_STATUS_TYPE_INVALID = _RobotApi.UBTEDU_ROBOT_STATUS_TYPE_INVALID
UBTEDU_ROBOT_PLAY_STATUS_IDLE = _RobotApi.UBTEDU_ROBOT_PLAY_STATUS_IDLE
UBTEDU_ROBOT_PLAY_STATUS_PLAYING = _RobotApi.UBTEDU_ROBOT_PLAY_STATUS_PLAYING
UBTEDU_ROBOT_PLAY_STATUS_PAUSED = _RobotApi.UBTEDU_ROBOT_PLAY_STATUS_PAUSED
UBTEDU_ROBOT_PLAYSTATUS_END = _RobotApi.UBTEDU_ROBOT_PLAYSTATUS_END
UBTEDU_ROBOT_PLAY_STATUS_INVALID = _RobotApi.UBTEDU_ROBOT_PLAY_STATUS_INVALID
UBTEDU_RC_SUCCESS = _RobotApi.UBTEDU_RC_SUCCESS
UBTEDU_RC_FAILED = _RobotApi.UBTEDU_RC_FAILED
UBTEDU_RC_NORESOURCE = _RobotApi.UBTEDU_RC_NORESOURCE
UBTEDU_RC_NOT_FOUND = _RobotApi.UBTEDU_RC_NOT_FOUND
UBTEDU_RC_WRONG_PARAM = _RobotApi.UBTEDU_RC_WRONG_PARAM
UBTEDU_RC_SOCKET_FAILED = _RobotApi.UBTEDU_RC_SOCKET_FAILED
UBTEDU_RC_SOCKET_NORESOURCE = _RobotApi.UBTEDU_RC_SOCKET_NORESOURCE
UBTEDU_RC_SOCKET_TIMEOUT = _RobotApi.UBTEDU_RC_SOCKET_TIMEOUT
UBTEDU_RC_SOCKET_ENCODE_FAILED = _RobotApi.UBTEDU_RC_SOCKET_ENCODE_FAILED
UBTEDU_RC_SOCKET_DECODE_FAILED = _RobotApi.UBTEDU_RC_SOCKET_DECODE_FAILED
UBTEDU_RC_SOCKET_ENCODE_ERROR = _RobotApi.UBTEDU_RC_SOCKET_ENCODE_ERROR
UBTEDU_RC_SOCKET_DECODE_ERROR = _RobotApi.UBTEDU_RC_SOCKET_DECODE_ERROR
UBTEDU_RC_SOCKET_SENDERROR = _RobotApi.UBTEDU_RC_SOCKET_SENDERROR
UBTEDU_RC_VOICE_FAILED = _RobotApi.UBTEDU_RC_VOICE_FAILED
UBTEDU_RC_VOICE_GRAMMAR_ERROR = _RobotApi.UBTEDU_RC_VOICE_GRAMMAR_ERROR
UBTEDU_RC_VOICE_AIUIDECODE_ERROR = _RobotApi.UBTEDU_RC_VOICE_AIUIDECODE_ERROR
UBTEDU_RC_LAST = _RobotApi.UBTEDU_RC_LAST
UBTEDU_ROBOT_SOFTVERSION_TYPE_STM32 = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_STM32
UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS1 = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS1
UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS2 = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS2
UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS3 = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS3
UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS4 = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS4
UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS5 = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS5
UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS6 = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS6
UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS7 = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS7
UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS8 = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS8
UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS9 = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS9
UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS10 = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS10
UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS11 = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS11
UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS12 = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS12
UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS13 = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS13
UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS14 = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS14
UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS15 = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS15
UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS16 = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS16
UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS17 = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_SERVOS17
UBTEDU_ROBOT_SOFTVERSION_TYPE_SDK = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_SDK
UBTEDU_ROBOT_SOFTVERSION_TYPE_RASPI = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_RASPI
UBTEDU_ROBOT_SOFTVERSION_TYPE_INVALID = _RobotApi.UBTEDU_ROBOT_SOFTVERSION_TYPE_INVALID
class UBTEDU_ROBOTINFO_T(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UBTEDU_ROBOTINFO_T, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UBTEDU_ROBOTINFO_T, name)
    __repr__ = _swig_repr
    __swig_setmethods__["acName"] = _RobotApi.UBTEDU_ROBOTINFO_T_acName_set
    __swig_getmethods__["acName"] = _RobotApi.UBTEDU_ROBOTINFO_T_acName_get
    if _newclass:
        acName = _swig_property(_RobotApi.UBTEDU_ROBOTINFO_T_acName_get, _RobotApi.UBTEDU_ROBOTINFO_T_acName_set)
    __swig_setmethods__["acIPAddr"] = _RobotApi.UBTEDU_ROBOTINFO_T_acIPAddr_set
    __swig_getmethods__["acIPAddr"] = _RobotApi.UBTEDU_ROBOTINFO_T_acIPAddr_get
    if _newclass:
        acIPAddr = _swig_property(_RobotApi.UBTEDU_ROBOTINFO_T_acIPAddr_get, _RobotApi.UBTEDU_ROBOTINFO_T_acIPAddr_set)

    def __init__(self):
        this = _RobotApi.new_UBTEDU_ROBOTINFO_T()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RobotApi.delete_UBTEDU_ROBOTINFO_T
    __del__ = lambda self: None
UBTEDU_ROBOTINFO_T_swigregister = _RobotApi.UBTEDU_ROBOTINFO_T_swigregister
UBTEDU_ROBOTINFO_T_swigregister(UBTEDU_ROBOTINFO_T)

class UBTEDU_ROBOTGYRO_SENSOR_T(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UBTEDU_ROBOTGYRO_SENSOR_T, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UBTEDU_ROBOTGYRO_SENSOR_T, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dValue"] = _RobotApi.UBTEDU_ROBOTGYRO_SENSOR_T_dValue_set
    __swig_getmethods__["dValue"] = _RobotApi.UBTEDU_ROBOTGYRO_SENSOR_T_dValue_get
    if _newclass:
        dValue = _swig_property(_RobotApi.UBTEDU_ROBOTGYRO_SENSOR_T_dValue_get, _RobotApi.UBTEDU_ROBOTGYRO_SENSOR_T_dValue_set)

    def __init__(self):
        this = _RobotApi.new_UBTEDU_ROBOTGYRO_SENSOR_T()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RobotApi.delete_UBTEDU_ROBOTGYRO_SENSOR_T
    __del__ = lambda self: None
UBTEDU_ROBOTGYRO_SENSOR_T_swigregister = _RobotApi.UBTEDU_ROBOTGYRO_SENSOR_T_swigregister
UBTEDU_ROBOTGYRO_SENSOR_T_swigregister(UBTEDU_ROBOTGYRO_SENSOR_T)

class UBTEDU_ROBOTENV_SENSOR_T(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UBTEDU_ROBOTENV_SENSOR_T, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UBTEDU_ROBOTENV_SENSOR_T, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iValue"] = _RobotApi.UBTEDU_ROBOTENV_SENSOR_T_iValue_set
    __swig_getmethods__["iValue"] = _RobotApi.UBTEDU_ROBOTENV_SENSOR_T_iValue_get
    if _newclass:
        iValue = _swig_property(_RobotApi.UBTEDU_ROBOTENV_SENSOR_T_iValue_get, _RobotApi.UBTEDU_ROBOTENV_SENSOR_T_iValue_set)

    def __init__(self):
        this = _RobotApi.new_UBTEDU_ROBOTENV_SENSOR_T()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RobotApi.delete_UBTEDU_ROBOTENV_SENSOR_T
    __del__ = lambda self: None
UBTEDU_ROBOTENV_SENSOR_T_swigregister = _RobotApi.UBTEDU_ROBOTENV_SENSOR_T_swigregister
UBTEDU_ROBOTENV_SENSOR_T_swigregister(UBTEDU_ROBOTENV_SENSOR_T)

class UBTEDU_ROBOTRASPBOARD_SENSOR_T(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UBTEDU_ROBOTRASPBOARD_SENSOR_T, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UBTEDU_ROBOTRASPBOARD_SENSOR_T, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iValue"] = _RobotApi.UBTEDU_ROBOTRASPBOARD_SENSOR_T_iValue_set
    __swig_getmethods__["iValue"] = _RobotApi.UBTEDU_ROBOTRASPBOARD_SENSOR_T_iValue_get
    if _newclass:
        iValue = _swig_property(_RobotApi.UBTEDU_ROBOTRASPBOARD_SENSOR_T_iValue_get, _RobotApi.UBTEDU_ROBOTRASPBOARD_SENSOR_T_iValue_set)

    def __init__(self):
        this = _RobotApi.new_UBTEDU_ROBOTRASPBOARD_SENSOR_T()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RobotApi.delete_UBTEDU_ROBOTRASPBOARD_SENSOR_T
    __del__ = lambda self: None
UBTEDU_ROBOTRASPBOARD_SENSOR_T_swigregister = _RobotApi.UBTEDU_ROBOTRASPBOARD_SENSOR_T_swigregister
UBTEDU_ROBOTRASPBOARD_SENSOR_T_swigregister(UBTEDU_ROBOTRASPBOARD_SENSOR_T)

class UBTEDU_ROBOTULTRASONIC_SENSOR_T(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UBTEDU_ROBOTULTRASONIC_SENSOR_T, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UBTEDU_ROBOTULTRASONIC_SENSOR_T, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iValue"] = _RobotApi.UBTEDU_ROBOTULTRASONIC_SENSOR_T_iValue_set
    __swig_getmethods__["iValue"] = _RobotApi.UBTEDU_ROBOTULTRASONIC_SENSOR_T_iValue_get
    if _newclass:
        iValue = _swig_property(_RobotApi.UBTEDU_ROBOTULTRASONIC_SENSOR_T_iValue_get, _RobotApi.UBTEDU_ROBOTULTRASONIC_SENSOR_T_iValue_set)

    def __init__(self):
        this = _RobotApi.new_UBTEDU_ROBOTULTRASONIC_SENSOR_T()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RobotApi.delete_UBTEDU_ROBOTULTRASONIC_SENSOR_T
    __del__ = lambda self: None
UBTEDU_ROBOTULTRASONIC_SENSOR_T_swigregister = _RobotApi.UBTEDU_ROBOTULTRASONIC_SENSOR_T_swigregister
UBTEDU_ROBOTULTRASONIC_SENSOR_T_swigregister(UBTEDU_ROBOTULTRASONIC_SENSOR_T)

class UBTEDU_ROBOTINFRARED_SENSOR_T(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UBTEDU_ROBOTINFRARED_SENSOR_T, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UBTEDU_ROBOTINFRARED_SENSOR_T, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iValue"] = _RobotApi.UBTEDU_ROBOTINFRARED_SENSOR_T_iValue_set
    __swig_getmethods__["iValue"] = _RobotApi.UBTEDU_ROBOTINFRARED_SENSOR_T_iValue_get
    if _newclass:
        iValue = _swig_property(_RobotApi.UBTEDU_ROBOTINFRARED_SENSOR_T_iValue_get, _RobotApi.UBTEDU_ROBOTINFRARED_SENSOR_T_iValue_set)

    def __init__(self):
        this = _RobotApi.new_UBTEDU_ROBOTINFRARED_SENSOR_T()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RobotApi.delete_UBTEDU_ROBOTINFRARED_SENSOR_T
    __del__ = lambda self: None
UBTEDU_ROBOTINFRARED_SENSOR_T_swigregister = _RobotApi.UBTEDU_ROBOTINFRARED_SENSOR_T_swigregister
UBTEDU_ROBOTINFRARED_SENSOR_T_swigregister(UBTEDU_ROBOTINFRARED_SENSOR_T)

class UBTEDU_ROBOTTOUCH_SENSOR_T(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UBTEDU_ROBOTTOUCH_SENSOR_T, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UBTEDU_ROBOTTOUCH_SENSOR_T, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iValue"] = _RobotApi.UBTEDU_ROBOTTOUCH_SENSOR_T_iValue_set
    __swig_getmethods__["iValue"] = _RobotApi.UBTEDU_ROBOTTOUCH_SENSOR_T_iValue_get
    if _newclass:
        iValue = _swig_property(_RobotApi.UBTEDU_ROBOTTOUCH_SENSOR_T_iValue_get, _RobotApi.UBTEDU_ROBOTTOUCH_SENSOR_T_iValue_set)

    def __init__(self):
        this = _RobotApi.new_UBTEDU_ROBOTTOUCH_SENSOR_T()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RobotApi.delete_UBTEDU_ROBOTTOUCH_SENSOR_T
    __del__ = lambda self: None
UBTEDU_ROBOTTOUCH_SENSOR_T_swigregister = _RobotApi.UBTEDU_ROBOTTOUCH_SENSOR_T_swigregister
UBTEDU_ROBOTTOUCH_SENSOR_T_swigregister(UBTEDU_ROBOTTOUCH_SENSOR_T)

class UBTEDU_ROBOTCOLOR_SENSOR_T(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UBTEDU_ROBOTCOLOR_SENSOR_T, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UBTEDU_ROBOTCOLOR_SENSOR_T, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iRedValue"] = _RobotApi.UBTEDU_ROBOTCOLOR_SENSOR_T_iRedValue_set
    __swig_getmethods__["iRedValue"] = _RobotApi.UBTEDU_ROBOTCOLOR_SENSOR_T_iRedValue_get
    if _newclass:
        iRedValue = _swig_property(_RobotApi.UBTEDU_ROBOTCOLOR_SENSOR_T_iRedValue_get, _RobotApi.UBTEDU_ROBOTCOLOR_SENSOR_T_iRedValue_set)
    __swig_setmethods__["iGreenValue"] = _RobotApi.UBTEDU_ROBOTCOLOR_SENSOR_T_iGreenValue_set
    __swig_getmethods__["iGreenValue"] = _RobotApi.UBTEDU_ROBOTCOLOR_SENSOR_T_iGreenValue_get
    if _newclass:
        iGreenValue = _swig_property(_RobotApi.UBTEDU_ROBOTCOLOR_SENSOR_T_iGreenValue_get, _RobotApi.UBTEDU_ROBOTCOLOR_SENSOR_T_iGreenValue_set)
    __swig_setmethods__["iBlueValue"] = _RobotApi.UBTEDU_ROBOTCOLOR_SENSOR_T_iBlueValue_set
    __swig_getmethods__["iBlueValue"] = _RobotApi.UBTEDU_ROBOTCOLOR_SENSOR_T_iBlueValue_get
    if _newclass:
        iBlueValue = _swig_property(_RobotApi.UBTEDU_ROBOTCOLOR_SENSOR_T_iBlueValue_get, _RobotApi.UBTEDU_ROBOTCOLOR_SENSOR_T_iBlueValue_set)
    __swig_setmethods__["iClearValue"] = _RobotApi.UBTEDU_ROBOTCOLOR_SENSOR_T_iClearValue_set
    __swig_getmethods__["iClearValue"] = _RobotApi.UBTEDU_ROBOTCOLOR_SENSOR_T_iClearValue_get
    if _newclass:
        iClearValue = _swig_property(_RobotApi.UBTEDU_ROBOTCOLOR_SENSOR_T_iClearValue_get, _RobotApi.UBTEDU_ROBOTCOLOR_SENSOR_T_iClearValue_set)

    def __init__(self):
        this = _RobotApi.new_UBTEDU_ROBOTCOLOR_SENSOR_T()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RobotApi.delete_UBTEDU_ROBOTCOLOR_SENSOR_T
    __del__ = lambda self: None
UBTEDU_ROBOTCOLOR_SENSOR_T_swigregister = _RobotApi.UBTEDU_ROBOTCOLOR_SENSOR_T_swigregister
UBTEDU_ROBOTCOLOR_SENSOR_T_swigregister(UBTEDU_ROBOTCOLOR_SENSOR_T)

class UBTEDU_ROBOTPRESSURE_SENSOR_T(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UBTEDU_ROBOTPRESSURE_SENSOR_T, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UBTEDU_ROBOTPRESSURE_SENSOR_T, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iValue"] = _RobotApi.UBTEDU_ROBOTPRESSURE_SENSOR_T_iValue_set
    __swig_getmethods__["iValue"] = _RobotApi.UBTEDU_ROBOTPRESSURE_SENSOR_T_iValue_get
    if _newclass:
        iValue = _swig_property(_RobotApi.UBTEDU_ROBOTPRESSURE_SENSOR_T_iValue_get, _RobotApi.UBTEDU_ROBOTPRESSURE_SENSOR_T_iValue_set)

    def __init__(self):
        this = _RobotApi.new_UBTEDU_ROBOTPRESSURE_SENSOR_T()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RobotApi.delete_UBTEDU_ROBOTPRESSURE_SENSOR_T
    __del__ = lambda self: None
UBTEDU_ROBOTPRESSURE_SENSOR_T_swigregister = _RobotApi.UBTEDU_ROBOTPRESSURE_SENSOR_T_swigregister
UBTEDU_ROBOTPRESSURE_SENSOR_T_swigregister(UBTEDU_ROBOTPRESSURE_SENSOR_T)

class UBTEDU_ROBOT_Battery_T(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UBTEDU_ROBOT_Battery_T, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UBTEDU_ROBOT_Battery_T, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iValue"] = _RobotApi.UBTEDU_ROBOT_Battery_T_iValue_set
    __swig_getmethods__["iValue"] = _RobotApi.UBTEDU_ROBOT_Battery_T_iValue_get
    if _newclass:
        iValue = _swig_property(_RobotApi.UBTEDU_ROBOT_Battery_T_iValue_get, _RobotApi.UBTEDU_ROBOT_Battery_T_iValue_set)

    def __init__(self):
        this = _RobotApi.new_UBTEDU_ROBOT_Battery_T()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RobotApi.delete_UBTEDU_ROBOT_Battery_T
    __del__ = lambda self: None
UBTEDU_ROBOT_Battery_T_swigregister = _RobotApi.UBTEDU_ROBOT_Battery_T_swigregister
UBTEDU_ROBOT_Battery_T_swigregister(UBTEDU_ROBOT_Battery_T)


def ubtRobotInitialize():
    return _RobotApi.ubtRobotInitialize()
ubtRobotInitialize = _RobotApi.ubtRobotInitialize

def ubtGetSWVersion(eType, pcVersion, iVersionLen):
    return _RobotApi.ubtGetSWVersion(eType, pcVersion, iVersionLen)
ubtGetSWVersion = _RobotApi.ubtGetSWVersion

def ubtGetRobotStatus(eType, piStatus):
    return _RobotApi.ubtGetRobotStatus(eType, piStatus)
ubtGetRobotStatus = _RobotApi.ubtGetRobotStatus

def ubtCheckAPPStatus(pcBuf, iWaitTime):
    return _RobotApi.ubtCheckAPPStatus(pcBuf, iWaitTime)
ubtCheckAPPStatus = _RobotApi.ubtCheckAPPStatus

def ubtDetectVoiceMsg(pcBuf, iTimeout):
    return _RobotApi.ubtDetectVoiceMsg(pcBuf, iTimeout)
ubtDetectVoiceMsg = _RobotApi.ubtDetectVoiceMsg

def ubtGetRobotServo(iIndexMask, pcAngle, iAngleLen):
    return _RobotApi.ubtGetRobotServo(iIndexMask, pcAngle, iAngleLen)
ubtGetRobotServo = _RobotApi.ubtGetRobotServo

def ubtSetRobotServo(iIndexMask, pcAngle, iTime):
    return _RobotApi.ubtSetRobotServo(iIndexMask, pcAngle, iTime)
ubtSetRobotServo = _RobotApi.ubtSetRobotServo

def ubtSetRobotVolume(iVolume):
    return _RobotApi.ubtSetRobotVolume(iVolume)
ubtSetRobotVolume = _RobotApi.ubtSetRobotVolume

def ubtSetRobotMotion(pcType, pcDirect, iSpeed, iRepeat):
    return _RobotApi.ubtSetRobotMotion(pcType, pcDirect, iSpeed, iRepeat)
ubtSetRobotMotion = _RobotApi.ubtSetRobotMotion

def ubtReadSensorValue(pcSensorType, pValue, iValueLen):
    return _RobotApi.ubtReadSensorValue(pcSensorType, pValue, iValueLen)
ubtReadSensorValue = _RobotApi.ubtReadSensorValue

def ubtReadSensorValueByAddr(pcSensorType, iAddr, pValue, iValueLen):
    return _RobotApi.ubtReadSensorValueByAddr(pcSensorType, iAddr, pValue, iValueLen)
ubtReadSensorValueByAddr = _RobotApi.ubtReadSensorValueByAddr

def ubtSetRobotLED(pcType, pcColor, pcMode):
    return _RobotApi.ubtSetRobotLED(pcType, pcColor, pcMode)
ubtSetRobotLED = _RobotApi.ubtSetRobotLED

def ubtStartRobotAction(pcName, iRepeat):
    return _RobotApi.ubtStartRobotAction(pcName, iRepeat)
ubtStartRobotAction = _RobotApi.ubtStartRobotAction

def ubtStopRobotAction():
    return _RobotApi.ubtStopRobotAction()
ubtStopRobotAction = _RobotApi.ubtStopRobotAction

def ubtVoiceStart():
    return _RobotApi.ubtVoiceStart()
ubtVoiceStart = _RobotApi.ubtVoiceStart

def ubtVoiceStop():
    return _RobotApi.ubtVoiceStop()
ubtVoiceStop = _RobotApi.ubtVoiceStop

def ubtVoiceTTS(isInterrputed, pcTTS):
    return _RobotApi.ubtVoiceTTS(isInterrputed, pcTTS)
ubtVoiceTTS = _RobotApi.ubtVoiceTTS

def ubtPlayMusic(pcPlayMusicType, pcName):
    return _RobotApi.ubtPlayMusic(pcPlayMusicType, pcName)
ubtPlayMusic = _RobotApi.ubtPlayMusic

def ubtGetMusicList(pacMusicName, iEachMusicNameLen, iMusicNameNum, piIndex):
    return _RobotApi.ubtGetMusicList(pacMusicName, iEachMusicNameLen, iMusicNameNum, piIndex)
ubtGetMusicList = _RobotApi.ubtGetMusicList

def ubtVisionDetect(pcVisionType, pcValue, iTimeout):
    return _RobotApi.ubtVisionDetect(pcVisionType, pcValue, iTimeout)
ubtVisionDetect = _RobotApi.ubtVisionDetect

def ubtTakeAPhoto(pacPhotoName, iPhotoNameLen):
    return _RobotApi.ubtTakeAPhoto(pacPhotoName, iPhotoNameLen)
ubtTakeAPhoto = _RobotApi.ubtTakeAPhoto

def ubtTransmitCMD(pcRemoteCmd, pcRemoteCmdRetData, iRemoteCmdRetDataLen):
    return _RobotApi.ubtTransmitCMD(pcRemoteCmd, pcRemoteCmdRetData, iRemoteCmdRetDataLen)
ubtTransmitCMD = _RobotApi.ubtTransmitCMD

def ubtReportStatusToApp(pcName, pcString):
    return _RobotApi.ubtReportStatusToApp(pcName, pcString)
ubtReportStatusToApp = _RobotApi.ubtReportStatusToApp

def ubtRobotDiscovery(iIsNeedSendRequest, pcAccount, pstRobotInfo):
    return _RobotApi.ubtRobotDiscovery(iIsNeedSendRequest, pcAccount, pstRobotInfo)
ubtRobotDiscovery = _RobotApi.ubtRobotDiscovery

def ubtRobotConnect(pcAccount, pcVersion, pcIPAddr):
    return _RobotApi.ubtRobotConnect(pcAccount, pcVersion, pcIPAddr)
ubtRobotConnect = _RobotApi.ubtRobotConnect

def ubtRobotDisconnect(pcAccount, pcVersion, pcIPAddr):
    return _RobotApi.ubtRobotDisconnect(pcAccount, pcVersion, pcIPAddr)
ubtRobotDisconnect = _RobotApi.ubtRobotDisconnect

def ubtRobotDeinitialize():
    return _RobotApi.ubtRobotDeinitialize()
ubtRobotDeinitialize = _RobotApi.ubtRobotDeinitialize
# This file is compatible with both classic and new-style classes.


